#+title: =ascii= package 

* Summary

=ascii= is an R package that provides formatted tables and lists in a number of markup formats ([[http://www.methods.co.nz/asciidoc/][Asciidoc]], [[http://txt2tags.sourceforge.net/][txt2tags]], [[http://docutils.sourceforge.net/rst.html][reStructuredText]], [[http://orgmode.org/][Org]], [[https://pandoc.org/][Pandoc]] markdown and [[http://textile.thresholdstate.com/][textile]]).  Documents in Rmarkdown and Org mode can include R code blocks that produce markup output. Sweave drivers are also available for all six markup formats, including caching through weaver. Finally, the package supports R scripting to export reports to a variety of formats.

** What =ascii= provides

=ascii= provides:

- a generic method: =ascii()=. It creates a plain text representations of many R objects.
- several classic =Sweave= drivers: =RweaveAsciidoc()=, =RweaveT2t()=, =RweaveReST()=, =RweaveOrg()= and =RweaveTextile()=.
- [[https://www.bioconductor.org/packages/release/bioc/html/weaver.html][weaver]] based =Sweave= drivers: =weaverAsciidoc()=, =weaverT2t()=, =weaverReST()=, =weaverOrg()= and =weaverTextile()=.
- some simple wrappers for =Sweave()= named =Asciidoc()=, =T2t()=, =ReST()=, =Org()= and =Textile()=.
- a Report class for R scripting.

** ascii methods

=ascii= provides methods for:

#+BEGIN_SRC R :session *R* :results output :exports both
  library(ascii)
  methods(ascii)
#+end_src

#+RESULTS:
#+begin_example
 [1] ascii.anova*                    ascii.aov*                     
 [3] ascii.aovlist*                  ascii.cast_df*                 
 [5] ascii.character*                ascii.coxph*                   
 [7] ascii.CrossTable*               ascii.data.frame*              
 [9] ascii.default*                  ascii.density*                 
[11] ascii.describe*                 ascii.describe.single*         
[13] ascii.factor*                   ascii.freqtable*               
[15] ascii.ftable*                   ascii.glm*                     
[17] ascii.htest*                    ascii.integer*                 
[19] ascii.list*                     ascii.lm*                      
[21] ascii.matrix*                   ascii.meanscomp*               
[23] ascii.mtable*                   ascii.numeric*                 
[25] ascii.packageDescription*       ascii.prcomp*                  
[27] ascii.proc_time*                ascii.sessionInfo*             
[29] ascii.simple.list*              ascii.smooth.spline*           
[31] ascii.stat.table*               ascii.summary.aov*             
[33] ascii.summary.aovlist*          ascii.summary.formula.cross*   
[35] ascii.summary.formula.response* ascii.summary.formula.reverse* 
[37] ascii.summary.glm*              ascii.summary.lm*              
[39] ascii.summary.prcomp*           ascii.summary.survfit*         
[41] ascii.summary.table*            ascii.survdiff*                
[43] ascii.survfit*                  ascii.table*                   
[45] ascii.ts*                       ascii.zoo*                     
see '?methods' for accessing help and source code
#+end_example

* Examples 

** Pandoc markdown using R markdown

#+BEGIN_SRC R :session *R* :exports none :results none
setwd("~/work")
#+end_src

A source Rmd file is [[https://github.com/mclements/ascii/blob/master/inst/examples/test-1-Rmd.Rmd][here]]. It can be processed to export to HTML using:

#+BEGIN_SRC R :session *R* :exports code :results none
library(rmarkdown)
library(prettydoc)
rmarkdown::render(system.file("examples/test-1-Rmd.Rmd",package="ascii"), html_pretty())
#+end_src

** Pandoc markdown using Noweb

A source Noweb file is [[https://github.com/mclements/ascii/blob/master/inst/examples/Pandoc-test-1.nw][here]]. It can be processed to export to HTML using:

#+BEGIN_SRC R :session *R* :exports code :results none
Pandoc(system.file("examples/Pandoc-test-1.nw",package="ascii"))
system("pandoc Pandoc-test-1.md > Pandoc-test-1.html")
#+end_src

Alternatively, to allow caching using weaver, we can use:

#+BEGIN_SRC R :session *R* :exports code :results none
Pandoc(system.file("examples/Pandoc-test-1.nw",package="ascii"), driver=weaverPandoc())
system("pandoc Pandoc-test-1.md > Pandoc-test-1.html")
#+end_src

** Asciidoc markup using Noweb

A source Noweb file is [[https://github.com/mclements/ascii/blob/master/inst/examples/Asciidoc-test-1.nw][here]]. It can be processed to export to HTML using:

#+BEGIN_SRC R :session *R* :exports code :results none
Asciidoc(system.file("examples/Asciidoc-test-1.nw",package="ascii"))
system("asciidoc Asciidoc-test-1.txt")
#+end_src

Alternatively, to allow caching using weaver, we can use:

#+BEGIN_SRC R :session *R* :exports code :results none
Asciidoc(system.file("examples/Asciidoc-test-1.nw",package="ascii"),driver=weaverAsciidoc())
system("asciidoc Asciidoc-test-1.txt")
#+end_src

** ReStructured Text markup using Noweb

A source Noweb file is [[https://github.com/mclements/ascii/blob/master/inst/examples/ReST-test-1.nw][here]] It can be processed to export to HTML using:

#+BEGIN_SRC R :session *R* :exports code :results none
ReST(system.file("examples/ReST-test-1.nw",package="ascii"))
system("rst2html ReST-test-1.rst > ReST-test-1.html")
#+end_src

Alternatively, to allow caching using weaver, we can use:

#+BEGIN_SRC R :session *R* :exports code :results none
ReST(system.file("examples/ReST-test-1.nw",package="ascii"), driver=weaverReST())
system("rst2html ReST-test-1.rst > ReST-test-1.html")
#+end_src

** Textile markup using Noweb

A source Noweb file is [[https://github.com/mclements/ascii/blob/master/inst/examples/Textile-test-1.nw][here]]. It can be processed to export to HTML using:

#+BEGIN_SRC R :session *R* :exports code :results none
Textile(system.file("examples/Textile-test-1.nw",package="ascii"))
system("textile Textile-test-1.txt > Textile-test-1.html")
#+end_src

Alternatively, to allow caching using weaver, we can use:

#+BEGIN_SRC R :session *R* :exports code :results none
Textile(system.file("examples/Textile-test-1.nw",package="ascii"), driver=weaverTextile())
system("textile Textile-test-1.txt > Textile-test-1.html")
#+end_src


** Txt2tags markup using Noweb

A source Noweb file is [[https://github.com/mclements/ascii/blob/master/inst/examples/T2t-test-1.nw][here]]. It can be processed to export to HTML using:

#+BEGIN_SRC R :session *R* :exports code :results none
T2t(system.file("examples/T2t-test-1.nw",package="ascii"))
system("txt2tags -t html T2t-test-1.t2t")
#+end_src

Alternatively, to allow caching using weaver, we can use:

#+BEGIN_SRC R :session *R* :exports code :results none
T2t(system.file("examples/T2t-test-1.nw",package="ascii"), driver=weaverT2t())
system("txt2tags -t html T2t-test-1.t2t")
#+end_src

** Org markup using Noweb

A source Noweb file is [[https://github.com/mclements/ascii/blob/master/inst/examples/Org-test-1.nw][here]]. It can be processed to export to HTML using:

#+BEGIN_SRC R :session *R* :exports code :results none
Org(system.file("examples/Org-test-1.nw",package="ascii"))
#+end_src

Alternatively, to allow caching using weaver, we can use:

#+BEGIN_SRC R :session *R* :exports code :results none
Org(system.file("examples/Org-test-1.nw",package="ascii"), driver=weaverOrg())
#+end_src


** Org mode using R code blocks

A more typical use of =ascii= with Org mode would be to use Babel with R code blocks. Initially, we set some options, including the default for =asciiType=. 

#+BEGIN_SRC R :session *R* :exports code :results none
options(asciiType = "org", width = 80)
#+END_SRC

*** Simple output

In Org Mode, we can use =:results output wrap= to get Org output:

#+begin_example
#+BEGIN_SRC R :session *R* :results output wrap :exports both
  x <- matrix(1:4, 2, 2)
  ascii(x, TRUE, TRUE)
#+end_src
#+end_example

This gives the following output:

#+BEGIN_SRC R :session *R* :results output wrap :exports results
  x <- matrix(1:4, 2, 2)
  ascii(x, TRUE, TRUE)
#+end_src

#+RESULTS:
:RESULTS:
|   |    1 |    2 |
| 1 | 1.00 | 3.00 |
| 2 | 2.00 | 4.00 |
:END:


The same with some options:

#+BEGIN_SRC R :session *R* :results output wrap :exports both
  ascii(x, caption = "A simple matrix", width = 50, digits = 0, align = c("c", "r"),
        style = matrix(c("d", "s", "e", "m"), 2, 2), lgroup = "group 1",
        tgroup = "group 2")
#+end_src 

#+RESULTS:
:RESULTS:
#+CAPTION: A simple matrix
|             | /*group 2*/ |     |
| **group 1** | =1=         | *3* |
|             | /2/         | 4   |
:END:

Note that the GitHub parser for =.org= files does not format this correctly.

*** A list example

#+BEGIN_SRC R :session *R* :results output wrap :exports both
 y <- summary(with(esoph, table(alcgp, agegp)))
 ascii(y, caption = "A simple list")
#+end_src

#+RESULTS:
:RESULTS:
#+CAPTION: A simple list
- Number of cases in table: 88 
- Number of factors: 2 
- Test for independence of all factors:
  - Chisq = 1.4189, df = 15, p-value = 1
  - Chi-squared approximation may be incorrect
:END:


